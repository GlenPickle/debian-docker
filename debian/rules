#!/usr/bin/make -f
# -*- makefile -*-

DOCKER_GOPKG := github.com/docker/docker

# MUST STAY IN SYNC WITH LIST IN "debian/helpers/download-libcontainer"
MULTI_ORIG_GOPKGS := \
	github.com/docker/libnetwork

# the list of Go packages to include in golang-github-docker-docker-dev
DEV_GOPKGS = \
	github.com/docker/docker/dockerversion \
	github.com/docker/docker/pkg

# temporary build path (see http://golang.org/doc/code.html#GOPATH)
OUR_GOPATH := $(CURDIR)/.gopath
GOPATH_PACKAGED := /usr/share/gocode
EXTRA_GOPATH := $(GOPATH_PACKAGED)

# if we've got the vendored source not purged, let's use it (normally purged via debian/repack.sh)
ifneq (, $(wildcard $(CURDIR)/vendor/src))
	EXTRA_GOPATH := $(EXTRA_GOPATH):$(CURDIR)/vendor
endif

export GOPATH := $(OUR_GOPATH):$(EXTRA_GOPATH)

# a few helpful variables for deduplication
DOCKER_BINPATH := /usr/bin/docker
DOCKER_VERSION := $(shell cat VERSION)

export DOCKER_GITCOMMIT := $(shell ./debian/helpers/gitcommit.sh $(DOCKER_VERSION))
export BUILDTIME := $(shell dpkg-parsechangelog -SDate)
export DOCKER_INITPATH := /usr/lib/docker.io/dockerinit

# AppArmor can be optionally used in Debian and is there by default in Ubuntu, so we need support for it compiled into our binary
# same story with SELinux
export DOCKER_BUILDTAGS := apparmor selinux


APPARMOR_RECOMMENDS := $(shell dpkg-vendor --is Ubuntu && echo apparmor)
BUILT_LIBC := $(shell dpkg-query -f '$${source:Package} (= $${source:Version})' -W libc-dev-bin)

override_dh_gencontrol:
	echo 'apparmor:Recommends=$(APPARMOR_RECOMMENDS)' >> debian/docker.io.substvars
	echo 'libc:Built-Using=$(BUILT_LIBC)' >> debian/docker.io.substvars
	dh_gencontrol


setup-gopath:
	# we need to make sure all deps are in our GOPATH
	mkdir -p "$(OUR_GOPATH)"
	@set -ex; \
		for package in $(DOCKER_GOPKG) $(MULTI_ORIG_GOPKGS); do \
			[ $$package = $(DOCKER_GOPKG) ] \
				|| for gopath in $(subst :, ,$(GOPATH)); do \
					if [ -d "$$gopath/src/$$package" ]; then \
						continue 2; \
					fi; \
				done; \
			[ $$package = $(DOCKER_GOPKG) ] \
				&& src=. \
				|| src=$$(basename $$package); \
			mkdir -p "$(OUR_GOPATH)/src/$$(dirname $$package)"; \
			ln -sfT "$$(readlink -f "$$src")" "$(OUR_GOPATH)/src/$$package"; \
		done
	# Copy across vendored dependencies during development
	cp -r vendor/src $(OUR_GOPATH)

override_dh_auto_build:
	@bash -c '{ [ "$$DOCKER_GITCOMMIT" ]; } || { echo; echo "error: missing DOCKER_GITCOMMIT - see debian/upstream-version-gitcommits"; echo; exit 2; } >&2'
	
	./debian/rules setup-gopath
	
	# build "docker" and "dockerinit"
	./hack/make.sh dynbinary
	
	# compile man pages
	./man/md2man-all.sh -q


override_dh_auto_install:
	# install docker binary
	mkdir -p debian/docker.io/$(dir $(DOCKER_BINPATH))
	cp -aT bundles/$(DOCKER_VERSION)/dynbinary/docker-$(DOCKER_VERSION) debian/docker.io/$(DOCKER_BINPATH)
	
	# Most of the source of docker does not make a library,
	#   so only ship the reusable parts (and in a separate package).
	@set -ex; \
		for package in $(DEV_GOPKGS); do \
			mkdir -p "debian/golang-github-docker-docker-dev/$(GOPATH_PACKAGED)/src/$$package"; \
			cp -aT "$$(readlink -f "$(OUR_GOPATH)/src/$$package")" "debian/golang-github-docker-docker-dev/$(GOPATH_PACKAGED)/src/$$package"; \
		done


override_dh_strip:
	# the SHA1 of dockerinit is important: don't strip it
	# also, Go has lots of problems with stripping, so just don't


override_dh_auto_test:


override_dh_installinit:
	dh_installinit --name=docker --no-restart-on-upgrade


override_dh_installudev:
	# use priority z80 to match the upstream priority of 80
	dh_installudev --priority=z80


VENDORED_FILES = vendor/src/github.com/Microsoft/go-winio \
            vendor/src/github.com/Microsoft/hcsshim \
            vendor/src/github.com/Sirupsen/logrus \
	    vendor/src/github.com/mattn/go-shellwords \
	    vendor/src/github.com/mattn/go-sqlite3 \
	    vendor/src/github.com/mistifyio/go-zfs \
	    vendor/src/github.com/tchap/go-patricia \
	    vendor/src/github.com/docker/go-connections \
	    vendor/src/github.com/kr/pty \
	    vendor/src/github.com/Azure/go-ansiterm \
	    vendor/src/github.com/docker/libtrust \
	    vendor/src/github.com/docker/go-units \
	    vendor/src/github.com/RackSec/srslog \
	    vendor/src/github.com/vdemeester/shakers \
	    vendor/src/github.com/boltdb/bolt \
	    vendor/src/github.com/vbatts/tar-split \
	    vendor/src/github.com/vishvananda/netns \
	    vendor/src/gopkg.in/fsnotify.v1 \
	    vendor/src/github.com/gorilla/mux \
	    vendor/src/github.com/gorilla/context \
	    vendor/src/github.com/imdario/mergo \
	    vendor/src/github.com/docker/engine-api \
	    vendor/src/github.com/fluent/fluent-logger-golang \
	    vendor/src/github.com/go-check/check \
	    vendor/src/github.com/hashicorp/consul \
	    vendor/src/golang.org/x/sys \
	    vendor/src/github.com/hashicorp/go-msgpack \
	    vendor/src/github.com/hashicorp/memberlist \
	    vendor/src/github.com/hashicorp/serf \
	    vendor/src/github.com/vaughan0/go-ini \
	    vendor/src/github.com/miekg/pkcs11 \
	    vendor/src/github.com/golang/protobuf \
	    vendor/src/github.com/tinylib/msgp \
	    vendor/src/github.com/philhofer/fwd \
	    vendor/src/github.com/syndtr/gocapability \
	    vendor/src/github.com/deckarep/golang-set \
	    vendor/src/github.com/docker/containerd \
	    vendor/src/google.golang.org/api \
	    vendor/src/google.golang.org/cloud \
	    vendor/src/golang.org/x/oauth2 \
	    vendor/src/github.com/Graylog2/go-gelf \
	    vendor/src/github.com/seccomp/libseccomp-golang \
	    vendor/src/github.com/opencontainers/runc \
	    vendor/src/github.com/opencontainers/specs \
	    vendor/src/github.com/agl/ed25519 \
	    vendor/src/github.com/docker/go \
	    vendor/src/github.com/BurntSushi/toml \
	    vendor/src/github.com/vishvananda/netlink \
	    vendor/src/github.com/samuel/go-zookeeper \
	    vendor/src/github.com/miekg/dns \
	    vendor/src/github.com/docker/libkv \
	    vendor/src/github.com/docker/libnetwork \
	    vendor/src/github.com/armon/go-metrics \
	    vendor/src/github.com/ugorji/go \
	    vendor/src/github.com/coreos/etcd \
	    vendor/src/github.com/godbus/dbus \
	    vendor/src/github.com/coreos/go-systemd \
	    vendor/src/github.com/docker/distribution

override_dh_auto_clean:
	dh_auto_clean

	# Remove autogenerated version file
	$(RM) -f dockerversion/version_autogen.go

	## Remove vendored files (when built from checkout or non-DFSG tarball):
	$(RM) -rv $(VENDORED_FILES)
	
	# OUR_GOPATH is created by us
	rm -rf "$(OUR_GOPATH)"
	
	# autogen is created by hack/make.sh
	# bundles is created by hack/make.sh
	# man/man*/ is created by man/md2man-all.sh
	rm -rf autogen bundles man/man*/
	
	# TODO FIGURE OUT WHY THIS IS CREATED AND SEND A PR UPSTREAM!!!
	rm -f a.out


%:
	dh $@ --with=systemd,bash-completion

PKD   = $(abspath $(dir $(MAKEFILE_LIST)))
PKG   = $(word 2,$(shell dpkg-parsechangelog -l$(PKD)/changelog | grep ^Source))
UVER  = $(shell dpkg-parsechangelog -l$(PKD)/changelog | perl -ne 'print $$1 if m{^Version:\s+(?:\d+:)?(\d.*)(?:\-\d+.*)};')
DTYPE = +dfsg1
VER  ?= $(subst $(DTYPE),,$(UVER))

## http://wiki.debian.org/onlyjob/get-orig-source
.PHONY: get-orig-source
get-orig-source: $(PKG)_$(VER)$(DTYPE).orig.tar.xz $(info I: $(PKG)_$(VER)$(DTYPE))

$(PKG)_$(VER)$(DTYPE).orig.tar.xz:
	@echo "# Downloading..."
	uscan --noconf --verbose --rename --destdir=$(CURDIR) --check-dirname-level=0 --force-download --download-version $(VER) $(PKD)
	$(if $(wildcard $(PKG)-$(VER)),$(error $(PKG)-$(VER) exist, aborting..))
	@echo "# Extracting..."
	mkdir $(PKG)-$(VER) \
	&& tar -xf $(PKG)_$(VER).orig.tar.* --directory $(PKG)-$(VER) --strip-components 1 \
	|| $(RM) -r $(PKG)-$(VER)
	@echo "# Cleaning-up..."
	cd $(PKG)-$(VER) \
	&& $(RM) -r -v $(VENDORED_FILES)
	#$(RM) -v $(PKG)_$(VER).orig.tar.*
	@echo "# Packing..."
	find -L "$(PKG)-$(VER)" -xdev -type f -print | LC_ALL=C sort \
	| XZ_OPT="-6v" tar -caf "$(PKG)_$(VER)$(DTYPE).orig.tar.xz" -T- --owner=root --group=root --mode=a+rX \
	&& $(RM) -r "$(PKG)-$(VER)"
