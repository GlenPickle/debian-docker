#!/bin/sh
set -e

. /usr/share/debconf/confmodule

case "$1" in
	configure)
		if [ -z "$2" ]; then
			addgroup --system docker
		fi

		# Ensure config directory permissions
		#  On a fresh install, $2 = '' and dpkg "le-nl" treat that as a
		#  greater version, so the body is not executed.
		if dpkg --compare-versions "$2" le-nl '1.11.2~ds1-1'; then
			if [ "$(stat -c '%a' /etc/docker)" = '700' ]; then
				chmod 0755 /etc/docker
			fi
		fi
		;;
	abort-*)
		# How'd we get here??
		exit 1
		;;
	*)
		;;
esac

# restart Docker if it's running (thus this is an upgrade) and the user (via debconf) tells us they're OK with that
db_version 2.0
db_fset docker.io/restart seen false
if [ -n "$2" ] && [ "$1" = 'configure' ] \
	&& [ -z "${DEBCONF_RECONFIGURE:-}" ] \
	&& invoke-rc.d --disclose-deny docker status > /dev/null 2>&1 \
; then
	db_input high docker.io/restart || :
	db_go || :
	db_get docker.io/restart
	if [ "$RET" = 'true' ]; then
		# Docker daemon appears to be running and should be restarted
		invoke-rc.d docker restart || :
	fi
fi
db_stop

#DEBHELPER#

# because we had to use "dh_installinit --no-start", we get to make sure the daemon is started on first install (and upgrades thereafter, if it isn't running)
# (this is adapted from debhelper's "autoscripts/postinst-init")
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ]; then
	if [ -z "${DEBCONF_RECONFIGURE:-}" ] && ! invoke-rc.d docker status > /dev/null 2>&1 ; then
		invoke-rc.d docker start || :
	fi
fi
